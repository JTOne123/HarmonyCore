;;*****************************************************************************
;;
;; Title:       Dbauthor.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure DBAUTHOR and from the data file DATA:auth.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace TraditionalBridge.Models

    public partial class Dbauthor extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strDbauthor
        private mOriginalSynergyData, strDbauthor

        private static sMetadata, @DbauthorMetadata

.region "Constructors"

        static method Dbauthor
        proc
            sMetadata = new DbauthorMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Dbauthor), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Dbauthor
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Dbauthor
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Unique author identifier
        ;;; </summary>
        {Key}
        {StringLength(10, ErrorMessage="Unique author identifier cannot exceed 10 characters. ")}
        public property Authorid, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.authorid, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.authorid = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Author's last name
        ;;; </summary>
        {StringLength(20, ErrorMessage="Author's last name cannot exceed 20 characters. ")}
        public property LastName, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.last_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.last_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Author's first name
        ;;; </summary>
        {StringLength(10, ErrorMessage="Author's first name cannot exceed 10 characters. ")}
        public property FirstName, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.first_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.first_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[3]
        endmethod

.endregion
endclass

endnamespace
