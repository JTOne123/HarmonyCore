import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Utility
import Synergex.SynergyDE.Select


namespace Harmony.Core.FileIO.Queryable.Materializer

	;;the intent here is to allow us to implement in memory tables and also direct isam operations
	public interface IRowState
		
		readonly property Finished, boolean
		readonly property Waiting, boolean

		method GetChangeState, void
			targetState, @MaterializerState
		endmethod

		method Fill, void
			targetState, @MaterializerState
		endmethod

		method MoveNext, boolean
		endmethod

	endinterface


	public class SimpleRowState implements IRowState
		structure memMapper
			fld,a1
		endstructure

		public readwrite property Finished, boolean
		public readwrite property Waiting, boolean
		DrivingState, @MaterializerState
		Enumerator, @Synergex.SynergyDE.Select.RowEnumerator
		;;this should be zero but its possible for it to be different in the future
		DrivingRowIndex, int
		RowLookup, @Dictionary<MaterializerState, int>
		private Grfa, a10

		public method SimpleRowState
			rowEnumerator, @Synergex.SynergyDE.Select.RowEnumerator
			driveState, @MaterializerState
			allStates, @IEnumerable<MaterializerState>
			joinObj, @JoinSelect
		proc
			DrivingState = driveState
			Enumerator = rowEnumerator
			RowLookup = IndexStates(allStates,joinObj)
		endmethod


		private static method IndexStates, @Dictionary<MaterializerState, int>
			allStates, @IEnumerable<MaterializerState>
			joinObj, @JoinSelect
		proc
			data result = new Dictionary<MaterializerState, int>()
			data matState, @MaterializerState
			foreach matState in allStates
			begin
				data memPnt, i4, matState.typeBuf.MemoryHandle.Value
				data structureSize, i4, matState.typeBuf.Metadata.StructureSize
				result.Add(matState, joinObj.GetRowArrayIndex(^m(memMapper.fld(1:structureSize), memPnt)))
			end
			mreturn result
		endmethod

		public method GetChangeState, void
			targetState, @MaterializerState
		proc
			Enumerator.Current.RowInfo(RowLookup[targetState], , ,targetState.changed)
		endmethod

		public method Fill, void
			targetState, @MaterializerState
		proc
			data currentRow = Enumerator.Current
			data memPnt, i4, targetState.typeBuf.MemoryHandle.Value
			data structureSize, i4, targetState.typeBuf.Metadata.StructureSize
			if(currentRow.RowInfo(RowLookup[targetState], targetState.grfa)) then
			begin
				targetState.filled = currentRow.Fill(^m(memMapper.fld(1:structureSize), memPnt))
				DebugLogSession.Logging.LogDebug("Materializer: filled record of type {0} with value {1}", targetState.typeBuf.DataObjectType, new MemoryHandleDebugLogHelper(memPnt, structureSize, true))
			end
			else
				targetState.filled = false
		endmethod

		public method MoveNext, boolean
		proc
			data moveNextResult = Enumerator.MoveNext()
			if(moveNextResult) then
			begin
				Waiting = false
				data changed = false
				if(!Enumerator.Current.RowInfo(DrivingRowIndex, Grfa,,changed))
					throw new InvalidOperationException("Driving row was invalid")

				if(changed)
				begin
					if(DrivingState.grfa != Grfa)
						Waiting = true
				end
			end
			else
				Finished = true

			mreturn moveNextResult
		endmethod
	endclass

	public class RowsManager
			
		private Rows, @List<IRowState>
		private RowLookup, @Dictionary<MaterializerState, IRowState>
		private method SimpleMoveNext, boolean
		proc
			mreturn Rows[0].MoveNext()
		endmethod

		public method RowsManager
			simpleEnumerator, @Synergex.SynergyDE.Select.RowEnumerator
			drivingState, @MaterializerState
			allStates, @IEnumerable<MaterializerState>
			joinObj, @JoinSelect
		proc
			Rows = new List<IRowState>() { new SimpleRowState(simpleEnumerator, drivingState, allStates, joinObj) }
		endmethod


		public method MoveNext, boolean
		proc
			;;fast dump out if we're the single select simple case
			if(Rows.Count == 1)
				mreturn SimpleMoveNext()

			data row, @IRowState
			data i = 0;
			data allRowsReady = true
			data allRowsFinished = true
			for i from 1 thru Rows.Count - 1 by 1
			begin
				;;foreach row state we need to check if its currently on the same sequence as the driving row
				;;always validate grfa's after actually iterating the underlying rowsenumerator
				;;this most likely needs to be a fetal error, but should only happen during very high write scenarios where there elements of the sequence are changing

				row = Rows[i]
				if(row.Finished)
				begin
					nextloop
				end

				allRowsFinished = false

				if(!row.Waiting)
				begin
					allRowsReady = false
					row.MoveNext()
				end
			end

			row = Rows[0]
			if(allRowsFinished && row.Finished)
				mreturn false

			if(allRowsReady)
			begin
				if(!row.MoveNext() && allRowsFinished)
					mreturn false
			end

			mreturn true
		endmethod
			
		public method GetChangeState, void
			targetState, @MaterializerState
		proc
			if(Rows.Count == 1) then
				Rows[0].GetChangeState(targetState)
			else
				RowLookup[targetState].GetChangeState(targetState)
		endmethod

		public method Fill, void
			targetState, @MaterializerState
		proc
			if(Rows.Count == 1) then
				Rows[0].Fill(targetState)
			else
				RowLookup[targetState].Fill(targetState)
		endmethod


	endclass

endnamespace
