import System
import System.Collections.Generic
import System.Text
import System.Linq
import Harmony.Core.Enumerations
import System.Linq.Expressions
import Harmony.Core.FileIO

namespace Harmony.Core.FileIO.Queryable

	public class ExprPart
		public readwrite property Left, @object
		public readwrite property Right, @Object
		public readwrite property Op, WhereClauseOperator
	endclass

	public class ConnectorPart
		public readwrite property Left, @object
		public readwrite property Right, @Object
		public readwrite property Op, WhereClauseConnector
	endclass

	public class FieldReference
		public readwrite property FieldDef, @FieldDataDefinition
		public readwrite property QuerySourceKey, int
	endclass

	public class ParameterReference
		public readwrite property Name, @string
	endclass

	public class PreparedQueryPlan
		structure memMapper
			fld,a1
		endstructure
		private mWhereParts, @List<object>
		private mSparseParts, @Dictionary<int, List<FieldDataDefinition>>
		private mOnParts, @List<object>
		private mOrderBy, @List<Tuple<FieldReference, Boolean>>
		private mQuerySourceTypes, @List<Type>
		private mQueryBufferPrototype, @QueryBuffer
		private mSimpleKeyNumber, short
		private mTraceIdentifier, @string
		public readwrite property TopParam, string
		public readwrite property SkipParam, string
		public readwrite property SkipTokenParam, string
		public readwrite property IsJoin, boolean
		public readwrite property IsCollection, boolean
		public readwrite property IsKeyedRead, boolean
		public static readwrite property LocalSparse, boolean, false
		public static readwrite property DisableSparse, boolean, false

		public method Prepare, void
		proc
			if(!IsJoin)
			begin
				data fieldNames = new List<string>()
				GetWhereFieldNames(fieldNames, mWhereParts.FirstOrDefault())
				;;this is relying on fieldNames containing duplicates when a field is referenced more than once
				data simpleKey, short?, fieldNames.Count == 1 ? mQueryBufferPrototype.TypeBuffers[0].Metadata.GetKeyNumberByFieldNames(fieldNames.ToArray()) : ^null
				if(simpleKey != ^null)
				begin
					IsKeyedRead = true
					mSimpleKeyNumber = simpleKey.Value
				end
			end

			;;Find any Orderby that isnt on the driving table a push it into the appropriate type buffer
			;;this only works if the target type buffer is a collection so we should error if it isnt
			if(mOrderBy != ^null)
			begin
				data orderByTpl, @Tuple<FieldReference, boolean>
				foreach orderByTpl in mOrderBy
				begin
					if(orderByTpl.Item1.QuerySourceKey != 0)
					begin
						data typeBuffer = mQueryBufferPrototype.TypeBuffers[orderByTpl.Item1.QuerySourceKey]
						data item1Parm = Expression.Parameter(typeBuffer.DataObjectType, "item1")
						data item2Parm = Expression.Parameter(typeBuffer.DataObjectType, "item2")

						data item1Target = Expression.Property(item1Parm, orderByTpl.Item1.FieldDef.LanguageName)
						data item2Target = Expression.Property(item2Parm, orderByTpl.Item1.FieldDef.LanguageName)
						data ifGtExp, @Expression

						if(orderByTpl.Item2) then
						begin
							ifGtExp = Expression.Condition(Expression.GreaterThan(item1Target, item2Target), Expression.Constant(1, ^typeof(Int32)), Expression.Constant(-1, ^typeof(Int32)), ^typeof(Int32))
						end
						else
						begin
							ifGtExp = Expression.Condition(Expression.LessThan(item1Target, item2Target), Expression.Constant(1, ^typeof(Int32)), Expression.Constant(-1, ^typeof(Int32)), ^typeof(Int32))
						end

						data orderByBody = Expression.Condition(Expression.Equal(item1Target, item2Target), Expression.Constant(0, ^typeof(Int32)), ifGtExp, ^typeof(Int32))
						data targetDelegateType = ^typeof(Comparison<>).MakeGenericType(new Type[#] { typeBuffer.DataObjectType })
						typeBuffer.OrderBy = Expression.Lambda(targetDelegateType, orderByBody, new ParameterExpression[#] { item1Parm, item2Parm }).Compile()
					end
				end
			end
		
		endmethod

		public method PreparedQueryPlan
			isCollection, boolean
			whereParts, @IEnumerable<object>
			sparseParts, @Dictionary<int, List<FieldDataDefinition>>
			onParts, @IEnumerable<object>
			orderBy, @List<Tuple<FieldReference, Boolean>>
			queryBufferPrototype, @QueryBuffer
			traceIdentifier, @string
		proc
			mTraceIdentifier = traceIdentifier
			mSparseParts = sparseParts
			mWhereParts = whereParts.ToList()
			mOnParts = onParts.ToList()
			mOrderBy = orderBy
			mQueryBufferPrototype = queryBufferPrototype
			IsJoin = mQueryBufferPrototype.TypeBuffers.Count > 1
			this.IsCollection = isCollection
			Prepare()

		endmethod

		public method GetQueryBuffer, @QueryBuffer
		proc
			mreturn mQueryBufferPrototype
		endmethod

		public method ExecuteCollectionPlan<T(DataObjectBase)>, @IEnumerable<T>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
		proc
			HarmonyFileIOMetricsEventSource.Log.MaterializationStart(mTraceIdentifier)
			try
			begin
				if(!IsCollection) then
				begin
					data result = ExecutePlan<T>(tracker, parameters, dataObjectProvider)
					if(result == ^null) then
						mreturn Enumerable.Empty<T>()
					else
						mreturn new T[#] { result }
				end
				else
					mreturn ExecuteSelectCollectionPlan<T>(tracker, parameters, dataObjectProvider)
			end
			finally
			begin
				HarmonyFileIOMetricsEventSource.Log.MaterializationEnd()
			end
			endtry
		endmethod

		public method ExecutePlan<T(DataObjectBase)>, T
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
		proc
			HarmonyFileIOMetricsEventSource.Log.MaterializationStart(mTraceIdentifier)
			try
			begin
				if(IsKeyedRead && !IsJoin) then
					mreturn ExecuteKeyedPlan<T>(tracker, parameters, dataObjectProvider)
				else
					mreturn ExecuteSelectPlan<T>(tracker, parameters, dataObjectProvider)
			end
			finally
			begin
				HarmonyFileIOMetricsEventSource.Log.MaterializationEnd()
			end
			endtry

		endmethod

		private method UntypedExecuteJoinCollectionPlan, @IEnumerable<DataObjectBase>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			skip, int
			top, int
		proc
			disposable data rows, @Synergex.SynergyDE.Select.RowEnumerator
			disposable data joinSelectObject, @Synergex.SynergyDE.Select.JoinSelect
			disposable data queryBuffer, @QueryBuffer, new QueryBuffer(mQueryBufferPrototype, dataObjectProvider, parameters)
			disposable data fromObj = FromObject(queryBuffer)
			data tObj, @DataObjectBase
			data materializerResult, @IEnumerable<DataObjectBase>
			data materializerEnumerator, @IEnumerator<DataObjectBase>
			data stats = new DataObjectMaterializer.MaterializerStats()
			data currentCount = 0 
			data targetCount = top ? skip + top : 0

			joinSelectObject = JoinObject(queryBuffer, fromObj, WhereObject(queryBuffer), OrderByObject(queryBuffer), SparseObject(queryBuffer))
			rows = joinSelectObject.GetEnumerator()
			materializerResult = DataObjectMaterializer.MaterializeObject(queryBuffer.TypeBuffers[0], rows, tracker, stats)
			materializerEnumerator = materializerResult.GetEnumerator()
			while(materializerEnumerator.MoveNext())
			begin
				tObj = materializerEnumerator.Current
				incr currentCount
				if(skip && skip > currentCount)
					nextloop
						
				if (targetCount && currentCount > targetCount)
					exitloop

				yield mreturn tObj
			end

		endmethod

		
		private method UntypedExecuteSelectCollectionPlan, @IEnumerable<DataObjectBase>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			skip, int
			top, int
		proc
			disposable data selectObject, @Synergex.SynergyDE.Select.Select
			;;dont ever use mQueryBufferPrototype for operations directly
			disposable data queryBuffer, @QueryBuffer, new QueryBuffer(mQueryBufferPrototype, dataObjectProvider, parameters)
			disposable data fromObj = FromObject(queryBuffer)
			data tObj, @DataObjectBase
			data stats = new DataObjectMaterializer.MaterializerStats()
			data currentCount = 0 
			data targetCount = top ? skip + top : 0

			selectObject = SelectObject(queryBuffer, fromObj, WhereObject(queryBuffer), OrderByObject(queryBuffer), SparseObject(queryBuffer))
			data memPnt, int, queryBuffer.TypeBuffers[0].MemoryHandle.Value
			data metadataObject = queryBuffer.TypeBuffers[0].Metadata
			data structureSize = metadataObject.StructureSize
			data enumerator, @Synergex.SynergyDE.Select.RestrictedAlphaEnumerator
			foreach ^m(memMapper.fld(1:structureSize), memPnt) in selectObject
			begin
				data grfa	,a10
				incr currentCount
					
				if(skip && skip > currentCount)
					nextloop
						
				if (targetCount && currentCount > targetCount) 
					yield exit
				if(enumerator == ^null)
					enumerator = selectObject.GetEnum()
				enumerator.CurrentRFA(grfa)
				stats.IOOPS = enumerator.TotalReadCount
				incr stats.RecordsReturned
				yield mreturn tracker(metadataObject.MakeNew(^m(memMapper.fld(1:structureSize), memPnt), grfa))
			end
				;;end
			;;finally
			;;begin
				;;HarmonyFileIOMetricsEventSource.Log.ReportIOOPS(stats.IOOPS)
				;;HarmonyFileIOMetricsEventSource.Log.ReportRecordsReturned(stats.RecordsReturned)
			;;end
			;;endtry
		endmethod


		public method ExecuteSelectCollectionPlan<T(DataObjectBase)>, @IEnumerable<T>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
			
		proc
			data skip, int, !String.IsNullOrWhiteSpace(SkipParam) ? (int)parameters[SkipParam] : 0
			data top, int, !String.IsNullOrWhiteSpace(TopParam) ? (int)parameters[TopParam] : 0
			if(IsJoin) then
				mreturn UntypedExecuteJoinCollectionPlan(tracker, parameters, dataObjectProvider, skip, top).OfType<T>()
			else
				mreturn UntypedExecuteSelectCollectionPlan(tracker, parameters, dataObjectProvider, skip, top).OfType<T>()
		endmethod

		;;this isnt right, dont use it for now
		private method ExecuteKeyedCollectionPlan<T(DataObjectBase)>, @IEnumerable<T>
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
		proc
			data resultList = new List<T>()
			disposable data fileIO = dataObjectProvider.GetFileIO<T>()
			fileIO.KeyReference = mSimpleKeyNumber
			if(FileIOErrorHelper.EnsureRead(fileIO.FindRecord(mSimpleKeyNumber, GetKeyLiteral(parameters))))
			begin
				data result, T
				while(FileIOErrorHelper.EnsureRead(fileIO.ReadNextRecord(result)))
				begin
					resultList.Add(tracker(result))
				end
			end
			mreturn resultList
		endmethod

		private method ExecuteKeyedPlan<T(DataObjectBase)>, T
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
		proc
			disposable data fileIO = dataObjectProvider.GetFileIO<T>()
			fileIO.KeyReference = mSimpleKeyNumber	
			data result, T
			if(FileIOErrorHelper.EnsureRead(fileIO.ReadRecord(result, mSimpleKeyNumber, GetKeyLiteral(parameters), true)))
			begin
				mreturn tracker(result)
			end

			mreturn ^null
		endmethod

		private method ExecuteSelectPlan<T(DataObjectBase)>, T
			tracker, @Func<DataObjectBase, DataObjectBase>
			parameters, @IReadOnlyDictionary<string, Object>
			dataObjectProvider, @Harmony.Core.Context.IDataObjectProvider
		proc
			mreturn ExecuteSelectCollectionPlan<T>(tracker, parameters, dataObjectProvider).FirstOrDefault()
		endmethod

		private method WhereObject, @Synergex.SynergyDE.Select.Where
			queryBuf, @QueryBuffer
		proc
			data selectBuilder = new SelectBuilder(queryBuf)
			if(mWhereParts.Count == 1) then
				mreturn selectBuilder.ProcessWhere(mWhereParts.First())
            else if(mWhereParts.Count == 2) then
			begin
                mreturn selectBuilder.ProcessWhere(new ConnectorPart() { Left = mWhereParts[0], Right = mWhereParts[1], Op=WhereClauseConnector.AndOperator }) 
            end
            else if(mWhereParts.Count > 2) then
				throw new NotImplementedException();
			else
				mreturn ^null
		endmethod

		private method OnObject, @Synergex.SynergyDE.Select.On
			queryBuf, @QueryBuffer
			typeBuf, @QueryBuffer.TypeBuffer
		proc
			data selectBuilder = new SelectBuilder(queryBuf)
			if(typeBuf.JoinOn != ^null) then
				mreturn selectBuilder.ProcessOn(typeBuf.JoinOn)
			else
				mreturn ^null
		endmethod

		private method MapField, @Synergex.SynergyDE.Select.OrderBy
			recordArea, a
			fieldDef, @FieldDataDefinition
			asc, boolean
		proc
			if(asc) then
				mreturn Synergex.SynergyDE.Select.OrderBy.Ascending(recordArea(fieldDef.StructurePosition:fieldDef.ElementSize))
			else
				mreturn Synergex.SynergyDE.Select.OrderBy.Descending(recordArea(fieldDef.StructurePosition:fieldDef.ElementSize))
		endmethod

		private method OrderByObject, @Synergex.SynergyDE.Select.OrderBy
			queryBuf, @QueryBuffer
		proc
			data orderByResult, @Synergex.SynergyDE.Select.OrderBy, ^null
			if(mOrderBy != ^null)
			begin
				data tpl, @Tuple<FieldReference, boolean>
				foreach tpl in mOrderBy
				begin
					data madeOrderBy, @Synergex.SynergyDE.Select.OrderBy, ^null
					if(tpl.Item1.QuerySourceKey == 0)
					begin
						data typeBuffer = queryBuf.TypeBuffers[tpl.Item1.QuerySourceKey]
						data handle = typeBuffer.MemoryHandle.Value
						;;TODO: this isnt handling composite keys in a join
						if(IsJoin) then
						begin
							data targetKey = typeBuffer.Metadata.GetKeyNumberByFieldNames(new string[#] { tpl.Item1.FieldDef.LanguageName })
							if(targetKey != ^null)
							begin
								if(tpl.Item2) then
									orderByResult = Synergex.SynergyDE.Select.OrderBy.AscendingKey(targetKey.Value)
								else
									orderByResult = Synergex.SynergyDE.Select.OrderBy.DescendingKey(targetKey.Value)
							end
						end
						else
						begin
							madeOrderBy = MapField(^m(handle), tpl.Item1.FieldDef, tpl.Item2)
							if(orderByResult == ^null) then
								orderByResult = madeOrderBy
							else
								orderByResult = orderByResult .and. madeOrderBy
						end

					end

				end
			end

			mreturn orderByResult
		endmethod

		private method SelectObject, @Synergex.SynergyDE.Select.Select
			queryBuf, @QueryBuffer
			fromObject, @Synergex.SynergyDE.Select.From
			whereObject, @Synergex.SynergyDE.Select.Where
			orderObject, @Synergex.SynergyDE.Select.OrderBy
			sparseObject, @Synergex.SynergyDE.Select.Sparse
		proc
			if(IsJoin)
				throw new NotImplementedException()
			if(orderObject != ^null) then
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject, orderObject)
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, orderObject)
			end
			else
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject)
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject)
			end
		endmethod

		private method SparseObject, @Synergex.SynergyDE.Select.Sparse
			queryBuf, @QueryBuffer
			structure tmpStructure
				fld	,a1
			endstructure
		proc
			;;only build a real sparse object if the channels involved are remote to xfServer
			;;there is a local only perf hit because of the additional setup
			if(mSparseParts.Count > 0 && !DisableSparse && (LocalSparse || queryBuf.TypeBuffers.Any(lambda(buf) { buf.RemoteIO.Value })))
			begin
				data result, @Synergex.SynergyDE.Select.Sparse
				data typeBufKvp, @KeyValuePair<int, @List<FieldDataDefinition>>
				foreach typeBufKvp in mSparseParts
				begin
					data fieldDetails, @FieldDataDefinition
					foreach fieldDetails in typeBufKvp.Value
					begin
						data sparseItem, @Synergex.SynergyDE.Select.Sparse
						data typeBuffer = queryBuf.TypeBuffers[typeBufKvp.Key]
						data memPtr, int, typeBuffer.MemoryHandle.Value
						sparseItem = new Synergex.SynergyDE.Select.Sparse(^m(tmpStructure(fieldDetails.StructurePosition:fieldDetails.ElementSize), memPtr))

						if(result == ^null) then
							result = sparseItem
						else
							result = result .and. sparseItem
					end
				end
				mreturn result
			end
			mreturn new Synergex.SynergyDE.Select.Sparse("*")

		endmethod


		private method JoinObject, @Synergex.SynergyDE.Select.JoinSelect
			queryBuf, @QueryBuffer
			fromObject, @Synergex.SynergyDE.Select.From
			whereObject, @Synergex.SynergyDE.Select.Where
			orderObject, @Synergex.SynergyDE.Select.OrderBy
			sparseObject, @Synergex.SynergyDE.Select.Sparse
		proc
			if(!IsJoin)
				throw new NotImplementedException()

			if(orderObject != ^null) then
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject, orderObject).Join()
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, orderObject).Join()
			end
			else
			begin
				if(whereObject != ^null) then
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject, whereObject).Join()
				else
					mreturn new Synergex.SynergyDE.Select.Select(sparseObject, fromObject).Join()
			end
		endmethod

		private method FromObject, @Synergex.SynergyDE.Select.From
			queryBuf, @QueryBuffer
		proc
			data fromItem, @QueryBuffer.TypeBuffer
			data currentJoin, @Synergex.SynergyDE.Select.From, ^null
			foreach fromItem in queryBuf.TypeBuffers
			begin
				data memPtr, i4, fromItem.MemoryHandle.Value
				data channel, i4, fromItem.IOChannel.Value
				data madeJoin = new Synergex.SynergyDE.Select.From(channel, Q_AUTO_LOCK, 1, ^m(memPtr))
				if(currentJoin == ^null) then
				begin
					currentJoin = madeJoin
				end
				else if(fromItem.IsInnerJoin && fromItem.JoinOn != ^null) then
				begin
					currentJoin = currentJoin.InnerJoin(madeJoin, OnObject(queryBuf, fromItem))
				end
				else if(fromItem.JoinOn != ^null)
				begin
					currentJoin = currentJoin.LeftJoin(madeJoin, OnObject(queryBuf, fromItem))
				end
			end
			mreturn currentJoin
			
		endmethod

		private method GetKeyLiteral, a
			params, @IReadOnlyDictionary<string, Object>
		proc
			data mainTypeBuffer = mQueryBufferPrototype.TypeBuffers[0]
			if(mWhereParts.Count != 1) then
				throw new InvalidOperationException()
			else
			begin
				data allParams = new Dictionary<string, Object>()
				GetWhereFieldValues(params, allParams, mWhereParts[0])
				mreturn mainTypeBuffer.Metadata.FormatKeyLiteral(mSimpleKeyNumber, allParams)
			end
		endmethod

		private method GetKeyOfReference, short
		proc
			data mainTypeBuffer = mQueryBufferPrototype.TypeBuffers[0]
			if(mWhereParts.Count != 1) then
				mreturn 0
			else
			begin
				data wherePart = mWhereParts[0]
				data keyFieldSegments = new List<string>()
				GetWhereFieldNames(keyFieldSegments, wherePart)
				mreturn mainTypeBuffer.Metadata.GetKeyNumberByFieldNames(keyFieldSegments.ToArray()).Value
			end
		endmethod
		
		private method GetWhereFieldNames, void
			names, @List<string>
			obj, @object
		proc
			if(obj .is. @ExprPart) then
			begin
				data exp = (@ExprPart)obj
				GetWhereFieldNames(names, exp.Left)
				GetWhereFieldNames(names, exp.Right)
			end
			else if(obj .is. @FieldReference) then
			begin
				names.Add(((@FieldReference)obj).FieldDef.LanguageName)
			end
			else if(obj .is. @ConnectorPart)
			begin
				data conPart = (@ConnectorPart)obj
				GetWhereFieldNames(names, conPart.Left)
				GetWhereFieldNames(names, conPart.Right)
			end
		endmethod

		private method GetWhereFieldValue, void
			params, @IReadOnlyDictionary<string, Object>
			values, @Dictionary<string, Object>
			left, @object
			right, @object
		proc
			if(left .is. @FieldReference) then
			begin
				if(right .is. @FieldReference) then
				begin
					data rFieldDef, @FieldDataDefinition, ((@FieldReference)right).FieldDef
					data lFieldDef, @FieldDataDefinition, ((@FieldReference)right).FieldDef
					;;one and only one can be a tag literal
					if(rFieldDef.DataType != FieldDataType.TagLiteral && lFieldDef.DataType != FieldDataType.TagLiteral || rFieldDef.DataType == lFieldDef.DataType)
						throw new NotImplementedException()
					if(rFieldDef.DataType == FieldDataType.TagLiteral) then
					begin
						if(!values.ContainsKey(lFieldDef.LanguageName))
							values.Add(lFieldDef.LanguageName, rFieldDef.TagValue)
					end
					else
					begin
						if(!values.ContainsKey(rFieldDef.LanguageName))
							values.Add(rFieldDef.LanguageName, lFieldDef.TagValue)
					end
				end
				else if(right .is. @ParameterReference) then
				begin
					if(!values.ContainsKey(((@FieldReference)left).FieldDef.LanguageName))
						values.Add(((@FieldReference)left).FieldDef.LanguageName, params[((@ParameterReference)right).Name])
				end
				else
				begin
					if(!values.ContainsKey(((@FieldReference)left).FieldDef.LanguageName))
						values.Add(((@FieldReference)left).FieldDef.LanguageName, right)
				end
			end
			else if(left .is. @ParameterReference) then
			begin
				if(right .is. @FieldReference) then
				begin
					if(!values.ContainsKey(((@FieldReference)right).FieldDef.LanguageName))
						values.Add(((@FieldReference)right).FieldDef.LanguageName, params[((@ParameterReference)left).Name])
				end
				else
				begin
					throw new NotImplementedException()
				end
			end
			else
			begin
				if(right .is. @FieldReference) then
				begin
					if(!values.ContainsKey(((@FieldReference)right).FieldDef.LanguageName))
						values.Add(((@FieldReference)right).FieldDef.LanguageName, left)
				end
				else
				begin
					throw new NotImplementedException()
				end
			end

		endmethod

		private method GetWhereFieldValues, void
			params, @IReadOnlyDictionary<string, Object>
			values, @Dictionary<string, Object>
			obj, @object
		proc
			if(obj .is. @ExprPart) then
			begin
				data exp = (@ExprPart)obj
				GetWhereFieldValue(params, values, exp.Left, exp.Right)
			end
			else if(obj .is. @ConnectorPart)
			begin
				data conPart = (@ConnectorPart)obj
				GetWhereFieldValues(params, values, conPart.Left)
				GetWhereFieldValues(params, values, conPart.Right)
			end
		endmethod

	endclass
endnamespace
