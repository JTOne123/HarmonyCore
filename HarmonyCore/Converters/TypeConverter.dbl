;;****************************************************************************
;;
;; Title:       TypeConverter.dbl
;;
;; Type:        Class
;;
;; Description: Basic object ype converter
;;
;; Copyright (c) 2014, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;****************************************************************************

import System
import System.Collections.Generic
import System.Text

import Newtonsoft.Json

namespace Harmony.Core.Converters

	;;; <summary>
	;;; JSON.Net type converter
	;;; </summary>
	;;; <remarks>
	;;; Enables convertion of specific types.
	;;; </remarks>
	public class TypeConverter extends JsonConverter
		
		;;; <summary>
		;;; JSON Type converter
		;;; </summary>
		;;; <param name="writer"></param>
		;;; <param name="value"></param>
		;;; <param name="serializer"></param>
		;;; <returns></returns>
		public override method WriteJson, void
			writer, @JsonWriter 
			value, @Object 
			serializer, @JsonSerializer 
			endparams
		proc
			data tmpVal	,@Type	,^as(value, Type)
			writer.WriteValue(tmpVal.AssemblyQualifiedName)
		endmethod
		
		;;; <summary>
		;;; Read JSON type
		;;; </summary>
		;;; <param name="reader"></param>
		;;; <param name="objectType"></param>
		;;; <param name="existingValue"></param>
		;;; <param name="serializer"></param>
		;;; <returns></returns>
		public override method ReadJson, @Object
			reader, @JsonReader 
			objectType, @Type 
			existingValue, @Object 
			serializer, @JsonSerializer 
			endparams
		proc
			mreturn Type.GetType(reader.Value.ToString())
		endmethod
		
		;;; <summary>
		;;; Return True for type convertion
		;;; </summary>
		;;; <param name="objectType"></param>
		;;; <returns></returns>
		public override method CanConvert, Boolean
			objectType, @Type 
			endparams
		proc
			mreturn true
		endmethod
		
		
	endclass

endnamespace
