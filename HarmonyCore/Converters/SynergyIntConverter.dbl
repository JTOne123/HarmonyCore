;;**********************************************************************
;;
;; Title:       SynergyIntConverter.dbl
;;
;; Type:        Class
;;
;; Description: Data Converter : converts a synergy integer type
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Utility

namespace Harmony.Core.Converters
	
	;;; <summary>
	;;;  The SynergyIntConverter class is designed to convert a Synergy Integer (i1/i2/i4) data type to a <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr" target="_blank">Command Language Runtime</a> compliant
	;;;  type.  The Synergy Integer field is converted to a native Integer type.  This class is used within the XAML Data Binding property
	;;;  and allows the underlying $$HarmonyCore Data Object$$ to expose Synergy Integer data 
	;;;  types.
	;;; </summary>

	public class SynergyIntConverter	
			
		;;; <summary>
		;;;	Convertion from a Synergy Integer type to a native <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr" target="_blank">Command Language Runtime</a> Integer type
		;;; </summary>
		;;; <param name="value">The inbound value to convert.</param>
		;;; <param name="targetType">The datatype type of the target.</param>
		;;; <param name="parameter">Any addiotnal binding parameters passed in, as specified by the ConverterParameter property.</param>
		;;; <param name="culture">An instance of the System.Globalization.CultureInfo class that identifies the culture of the client _UI_.</param>
		;;; <remarks>
		;;; The Convert method is utilised by the _WPF_ framework when conversion of a databound source is required.  The SynergyIntegerConverter
		;;; Convert method marshals the data from a Synergy Intger type to a native <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr" target="_blank">Command Language Runtime</a> Integer type.
		;;; </remarks>
		public static method Convert	,@Object
			value				,@Object
			targetType			,@Type
			parameter			,@Object
			culture				,@System.Globalization.CultureInfo
			endparams
		proc
			if (value == ^null)
				mreturn ^null
				
			if (value != ^null) DebugLogSession.Logging.LogTrace("Integer Convert Value : " + value.ToString())
			if (targetType != ^null) DebugLogSession.Logging.LogTrace("Integer Convert Target type : " + targetType.ToString())
			if (parameter != ^null) DebugLogSession.Logging.LogTrace("Integer Convert Parameter : " + Parameter.ToString())
				
			data tmpI	,i4
			data tmpInt	,int
				
			try
			begin
				tmpI = Convert.ToInt32(value)
			end
			catch (e, @Exception)
			begin
				DebugLogSession.Logging.LogTrace("Value passed to converter (DTF) : {0} : end value", value)
				DebugLogSession.Logging.LogException(e, "Int Converter")
			end
			endtry
				
			tmpInt = tmpI
				
			DebugLogSession.Logging.LogTrace("Integer Convert return : {0}", tmpInt)
				
			mreturn (Object)tmpInt 
				
		endmethod
			
		;;; <summary>
		;;;	Convertion from the native <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr" target="_blank">Command Language Runtime</a> Integer value to a Synergy Integer value
		;;; </summary>
		;;; <param name="value">The inbound value to convert.</param>
		;;; <param name="targetType">The datatype type of the target.</param>
		;;; <param name="parameter">Any addiotnal binding parameters passed in, as specified by the ConverterParameter property.</param>
		;;; <param name="culture">An instance of the System.Globalization.CultureInfo class that identifies the culture of the client _UI_.</param>
		;;; <remarks>
		;;; The Convert method is utilised by the _WPF_ framework when conversion of a databound source is required.  The SynergyIntegerConverter
		;;; ConvertBack method marshals the data from a native <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr" target="_blank">Command Language Runtime</a> Integer type to a Synergy Intger (i1/i2/i4) type
		;;; </remarks>
		public static method ConvertBack	,@Object
			value				,@Object
			targetType			,@Type
			parameter			,@Object
			culture				,@System.Globalization.CultureInfo
			endparams
		proc
			try
			begin
				if (value == ^null)
					mreturn (Object)((i)0)
				
				if (value != ^null) DebugLogSession.Logging.LogTrace("Integer ConvertBack Value : {0}", value)
				if (targetType != ^null) DebugLogSession.Logging.LogTrace("Integer ConvertBack Target type : {0}", targetType)
				if (parameter != ^null) DebugLogSession.Logging.LogTrace("Integer ConvertBack Parameter : {0}", Parameter)
				
				data iVal	,i4	,0
				
				data testString	,String
				
				testString = value.ToString()
				
				if (testString.Length)
					iVal = Convert.ToInt64(value)
				
				DebugLogSession.Logging.LogTrace("Integer ConvertBack return : {0}", iVal)
				mreturn  (@i)Convert.ToInt64(iVal)
				
			end
			catch (e, @Exception)
			begin
				;;can't really do anything but return zero
				mreturn (Object)((i)0)
			end
			endtry
		
		endmethod
	endclass
		
endnamespace
		
		
		