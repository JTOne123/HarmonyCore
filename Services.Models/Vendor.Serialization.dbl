;;*****************************************************************************
;;
;; Title:       Vendor.Serialization.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure VENDORS and from the data file DAT:vendors.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text.Json
import System.Text.Json.Serialization
import Harmony.Core

namespace Services.Models

    ;;put the converter on the target type using a partial class
    {JsonConverter(^typeof(VendorConverter))}
    public partial class Vendor extends DataObjectBase

    endclass

    public class VendorConverter extends JsonConverter<Vendor>
        private static FallbackConverter, @JsonConverter<Vendor>
        
        static method VendorConverter
        proc
            FallbackConverter = (@JsonConverter<Vendor>)Activator.CreateInstance(Type.GetType("System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1").MakeGenericType(new Type[#] { ^typeof(Vendor) }))
        endmethod

        public override method Write, void
            writer, @Utf8JsonWriter
            objectValue, @Vendor
            options, @JsonSerializerOptions
        proc
            writer.WriteStartObject()
            writer.WriteNumber("VendorNumber", objectValue.VendorNumber)
            writer.WriteString("Name", objectValue.Name)
            writer.WriteString("Street", objectValue.Street)
            writer.WriteString("City", objectValue.City)
            writer.WriteString("State", objectValue.State)
            writer.WriteNumber("ZipCode", objectValue.ZipCode)
            writer.WriteString("Contact", objectValue.Contact)
            writer.WriteString("Phone", objectValue.Phone)
            writer.WriteString("Fax", objectValue.Fax)
            writer.WriteString("PaymentTermsCode", objectValue.PaymentTermsCode)
			writer.WriteEndObject()
		endmethod

        public override method Read, @Vendor
            inout reader, Utf8JsonReader
            typeToConvert, @Type
            options, @JsonSerializerOptions 
        proc
            mreturn FallbackConverter.Read(reader, typeToConvert, options)
        endmethod
    endclass

endnamespace
