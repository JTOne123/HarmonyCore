;;*****************************************************************************
;;
;; Title:       Item.Serialization.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure ITEMS and from the data file DAT:items.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text.Json
import System.Text.Json.Serialization
import Harmony.Core

namespace Services.Models

    ;;put the converter on the target type using a partial class
    {JsonConverter(^typeof(ItemConverter))}
    public partial class Item extends DataObjectBase

    endclass

    public class ItemConverter extends JsonConverter<Item>
        private static FallbackConverter, @JsonConverter<Item>
        
        static method ItemConverter
        proc
            FallbackConverter = (@JsonConverter<Item>)Activator.CreateInstance(Type.GetType("System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1").MakeGenericType(new Type[#] { ^typeof(Item) }))
        endmethod

        public override method Write, void
            writer, @Utf8JsonWriter
            objectValue, @Item
            options, @JsonSerializerOptions
        proc
            writer.WriteStartObject()
            writer.WriteNumber("ItemNumber", objectValue.ItemNumber)
            writer.WriteNumber("VendorNumber", objectValue.VendorNumber)
            writer.WriteNumber("Size", objectValue.Size)
            writer.WriteString("CommonName", objectValue.CommonName)
            writer.WriteString("LatinName", objectValue.LatinName)
            writer.WriteNumber("ZoneCode", objectValue.ZoneCode)
            writer.WriteNumber("Type", objectValue.Type)
            writer.WriteString("Flowering", objectValue.Flowering)
            writer.WriteString("FlowerColor", objectValue.FlowerColor)
            writer.WriteString("Shape", objectValue.Shape)
            writer.WriteNumber("MaxHeight", objectValue.MaxHeight)
            writer.WriteNumber("MaxWidth", objectValue.MaxWidth)
            writer.WriteString("WaterRequirement", objectValue.WaterRequirement)
            writer.WriteString("SunRequirement", objectValue.SunRequirement)
            writer.WriteString("BinLocation", objectValue.BinLocation)
            writer.WriteNumber("QtyOnHand", objectValue.QtyOnHand)
            writer.WriteNumber("QtyAllocated", objectValue.QtyAllocated)
            writer.WriteNumber("QtyOnOrder", objectValue.QtyOnOrder)
            writer.WriteNumber("ReorderLevel", objectValue.ReorderLevel)
            writer.WriteNumber("UnitPrice", objectValue.UnitPrice)
            writer.WriteNumber("CostPrice", objectValue.CostPrice)
			writer.WriteEndObject()
		endmethod

        public override method Read, @Item
            inout reader, Utf8JsonReader
            typeToConvert, @Type
            options, @JsonSerializerOptions 
        proc
            mreturn FallbackConverter.Read(reader, typeToConvert, options)
        endmethod
    endclass

endnamespace
