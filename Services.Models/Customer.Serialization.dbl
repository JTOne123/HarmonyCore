;;*****************************************************************************
;;
;; Title:       Customer.Serialization.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure CUSTOMERS and from the data file DAT:customers.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text.Json
import System.Text.Json.Serialization
import Harmony.Core
import System.Reflection

namespace Services.Models

	;;put the converter on the target type using a partial class
	{JsonConverter(^typeof(CustomerConverter))}
	public partial class Customer extends DataObjectBase

	endclass

	public class CustomerConverter extends JsonConverter<Customer>

		public static MemberLookup, @Dictionary<string, PropertyInfo>

		static method CustomerConverter
		proc
			MemberLookup = new Dictionary<String, PropertyInfo>()
			data publicProperties = ^typeof(Customer).GetProperties()
			data prop, @PropertyInfo
			foreach prop in publicProperties
			begin
				
				MemberLookup.Add(prop.Name, prop)
			end
		endmethod

		public override method Write, void
			writer, @Utf8JsonWriter
			objectValue, @Customer
			options, @JsonSerializerOptions
		proc
			writer.WriteStartObject()
			writer.WriteNumber("CustomerNumber", objectValue.CustomerNumber)
			writer.WriteString("Name", objectValue.Name)
			writer.WriteString("Street", objectValue.Street)
			writer.WriteString("City", objectValue.City)
			writer.WriteString("State", objectValue.State)
			writer.WriteNumber("ZipCode", objectValue.ZipCode)
			writer.WriteString("Contact", objectValue.Contact)
			writer.WriteString("Phone", objectValue.Phone)
			writer.WriteString("Fax", objectValue.Fax)
			writer.WriteNumber("FavoriteItem", objectValue.FavoriteItem)
			writer.WriteString("PaymentTermsCode", objectValue.PaymentTermsCode)
			writer.WriteNumber("TaxId", objectValue.TaxId)
			writer.WriteNumber("CreditLimit", objectValue.CreditLimit)
			writer.WriteEndObject()
		endmethod

		public override method Read, @Customer
			inout reader, Utf8JsonReader
			typeToConvert, @Type
			options, @JsonSerializerOptions 
		proc
			data resultObject = new Customer()
			data propType, @PropertyInfo
			
			while(reader.Read())
			begin
				using reader.TokenType select
				(JsonTokenType.Comment),
					nop
				(JsonTokenType.String),
					propType.SetValue(resultObject, reader.GetString())
				(JsonTokenType.None),
					nop
				(JsonTokenType.False),
					propType.SetValue(resultObject, false)
				(JsonTokenType.EndObject),
					mreturn resultObject
				(JsonTokenType.Number),
				begin
					if(propType.PropertyType == ^typeof(byte)) then
						propType.SetValue(resultObject, reader.GetByte())
					else if(propType.PropertyType == ^typeof(sbyte)) then
						propType.SetValue(resultObject, reader.GetSByte())
					else if(propType.PropertyType == ^typeof(short)) then
						propType.SetValue(resultObject, reader.GetInt16())
					else if(propType.PropertyType == ^typeof(ushort)) then
						propType.SetValue(resultObject, reader.GetUInt16())
					else if(propType.PropertyType == ^typeof(int)) then
						propType.SetValue(resultObject, reader.GetInt32())
					else if(propType.PropertyType == ^typeof(uint)) then
						propType.SetValue(resultObject, reader.GetUInt32())
					else if(propType.PropertyType == ^typeof(long)) then
						propType.SetValue(resultObject, reader.GetInt64())
					else if(propType.PropertyType == ^typeof(ulong)) then
						propType.SetValue(resultObject, reader.GetUInt64())
					else if(propType.PropertyType == ^typeof(decimal)) then
						propType.SetValue(resultObject, reader.GetDecimal())
					else if(propType.PropertyType == ^typeof(float)) then
						propType.SetValue(resultObject, reader.GetSingle())
					else if(propType.PropertyType == ^typeof(double)) then
						propType.SetValue(resultObject, reader.GetDouble())
					else
						throw new NotImplementedException()
				end
				(JsonTokenType.PropertyName),
				begin
					if(!MemberLookup.TryGetValue(reader.GetString(), propType))
						propType = ^null
				end

				(JsonTokenType.Null),
					propType.SetValue(resultObject, ^null)
				(JsonTokenType.StartObject),
					propType.SetValue(resultObject, JsonSerializer.Deserialize(reader, propType.PropertyType, options))
				(JsonTokenType.True),
					propType.SetValue(resultObject, true)
				(JsonTokenType.EndArray),
					throw new NotImplementedException()
				(JsonTokenType.StartArray),
					propType.SetValue(resultObject, JsonSerializer.Deserialize(reader, propType.PropertyType, options))
				(),
					nop
				endusing
			end 
		endmethod
	endclass
endnamespace
